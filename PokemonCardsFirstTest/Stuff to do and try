Request Pokemon sets from API --> Done

Set the title of each set as a new cell in the table view --> Done

On click of each set, take the user to the next view --> Done

User can click a button to open a pack --> Done

Call API to get 10 random cards from API (cards have to belong to the set) --> Done

Diplsay 10 cards on top of each other, when tapped the top card dissapears --> Done

Cards fade in and out --> Done

Hide open pack button until they have seen all the cards --> Done

Don't allow cards to be repeated --> Done

Packs give 6 common, 3 uncommon and 1 rare --> Done (WORKS FOR BASE SET FOR NOW)

Cards displayed will be in order of their rarity during pack opening --> Done

Have to check all different types of rares there are and add the to the .contains in the get rare card method --> Done

Add firebase auth --> Done

Add firebase cloud firestore to store users cards --> Done

Add cards to users collection after user has seen all the cards from a pack --> Done

Create new root screen where user can select to see their collection, look at sets to open packs or an option to take them to a sreen with a collection sort o all the different types of pokemon in the API --> Done

Create segue to take user to their collection --> Done

Read users cards from firestore --> Done

Use table view to display the users cards --> Done

Create custom reusable cell for users collection of cards --> Done

Find out how to make the card collection table view not so laggy --> Done

Make the saving cards to firestore a method in the model, instead of the controller --> Done

Display loading for the table views that take a while to load --> Done

Sort cards by rarity in users collection --> Done (Maybe bad time complexity)

When a user clicks on a card in a table view, take them to a different screen that will display the card in big picture --> Done

Before deleteing the card add the card and the price (Do the same method of saving the card, but add the price to the array value) --> Done
Delete the document by the id --> Done

Add card to market collection when pressed sell --> Done
Remove from users collection when pressed sell --> Done
Take back to collection when sold --> Done

Deselect rows in table views when pressed --> Done

When a card has been added to market and removed the document from the users collection, the card still appears
in the users card collection, so maybe inistead of making another api fetch when the delegate pops the user back to the collection, just remove the card from the array in the user card collection controller and reload the table view -->Done

-----------------------------------------TO-DO-----------------------------------------------------

Where the delegate is called to pop back to card collection,
add an alert that appears saying that it has been deleted

If the card doesn't get deleted then show an alert in the card display saying that it has not been deleted

Add constants file

Set delegates to handle api errors

Make alerts for networking errors and loading from database errors

Maybe add time stamp to cards added to firestore, so that users can sort their collection by most recently opened

Make users have a document called wallet that contains just a number, for example: ["Amount" : 50]. Add this when the user registers

In API calls if there is an error, return an error in the escaping closure, and then in the controllers
when calling the fetch function, check if the closure returns an error.
